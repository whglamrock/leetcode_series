from collections import defaultdict
from typing import List

# Intuition:
# 1) Find all the nodes that are directly (not through other infected node) infected by each initial[i]
# 2) After doing bfs for all initial[i], we have a affectedNodeToDirectlyAffectedBy map (int to list map);
# among all affectedNodes we find out which are directly infected by only 1 node. This means that if we removed the
# corresponding initial[i] this affected node would've been not affected
# 3) We count such affected node for the corresponding initial[i]
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        nodeToDirectedInfectedBy = defaultdict(set)
        initialInfected = set(initial)
        for infectedSrc in initial:
            # store the directly infected node
            visited = set()
            todo = {infectedSrc}
            while todo:
                nextTodo = set()
                for node in todo:
                    visited.add(node)
                    for connectedNode in range(n):
                        if connectedNode == node \
                                or connectedNode in visited \
                                or connectedNode in initialInfected \
                                or graph[node][connectedNode] == 0:
                            continue
                        nextTodo.add(connectedNode)
                todo = nextTodo
            for directlyInfected in visited:
                nodeToDirectedInfectedBy[directlyInfected].add(infectedSrc)

        nodeToNumOfExclusivelyAffectedNodes = defaultdict(int)
        for affectedNode in nodeToDirectedInfectedBy:
            if len(nodeToDirectedInfectedBy[affectedNode]) == 1:
                srcNode = list(nodeToDirectedInfectedBy[affectedNode])[0]
                nodeToNumOfExclusivelyAffectedNodes[srcNode] += 1

        maxNumOfExclusivelyAffectedNodes = max(nodeToNumOfExclusivelyAffectedNodes.values())
        for i in range(n):
            if i not in initialInfected or i not in nodeToNumOfExclusivelyAffectedNodes:
                continue
            if nodeToNumOfExclusivelyAffectedNodes[i] == maxNumOfExclusivelyAffectedNodes:
                return i
        return 0


print(Solution().minMalwareSpread(graph=[[1, 1, 0], [1, 1, 1], [0, 1, 1]], initial=[0, 1]))
